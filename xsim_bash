# MIT License
#
# Copyright (c) 2024 B. Arar
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


tb_is_systemverilog=false;
tb_is_verilog=false;
sv="";
to_delete=false;
to_log="";
file_name="";
extension="";
topname="";

while true; do
    case "${1}" in
        --help | -h)
            echo "
 Usage: ${0##*/} [name of testbench/top module].[s]v 

* All Verilog/SystemVerilog files in in the parent directory and all its subdirectories are \
recursively detected and included in the simulation command.
* Name of the top module file must match the name of the module inside.
* Top module must be in top-level directory.

 Options:
    --help/-h   View this help text.
    --nolog     Passed to vivado utilities to suppress some log files.
    --delete    Deletes simulation files after run. 
            ";
            exit
            ;;
        --nolog)
            to_log="--nolog";
            shift
            ;;
        --delete)
            to_delete=true;
            shift
            ;;
        *.sv)
            tb_is_systemverilog=true
            sv="--sv"
            top="${1}"
            topname="${1##*/}"
            shift
            ;;
        *.v)
            tb_is_verilog=true
            sv=""
            top="${1}"
            topname="${1##*/}"
            shift
            ;;
        *)
            break
            ;;
    esac
done

if [ -e $top ]; then
    echo "Top module $top found..."
else
    echo "File $top does not exist, exiting..."
    exit 1;
fi

list=$(ls -R)

current_subdir=""

files=""

for item in $list;
do
    if [[ $item == $top ]]; then
        continue
    fi
    if [[ $item == *\: && $item != .: ]]; then
        current_subdir=${item%?}
    elif [[ $item == *.sv || $item == *.v ]]; then
        if [[ $current_subdir != "" ]]; then
            files="$files $current_subdir/$item"
        else
            files="$files $item"
        fi
    fi
done

echo "Attempting to launching xvlog.."

xvlog $top $files $to_log $sv;

if ! [ $? -eq 0 ]; then
    echo "xvlog failed. Aborting.."
    exit 2;
fi

echo "Launching xelab.."

xelab ${topname%.*} $to_log

if ! [ $? -eq 0 ]; then
    echo "xelab failed. Aborting.."
    exit 4;
fi

echo "Launching xsim.."

xsim ${topname%.*} -R $to_log;

if ! [ $? -eq 0 ]; then
    echo "xsim failed. Aborting.."
    exit 5;
fi


if [ $to_delete == true ]; then
    echo Deleting files..;
    rm -r xsim.dir
    rm xvlog.pb
    rm xelab.pb
    if [ -f "xvlog.log" ]; then rm xvlog.log; fi
    if [ -f "xelab.log" ]; then rm xelab.log; fi
    for file in * ; do
        if [[  ${file} == xsim.* || ${file} == xsim_*.backup.* ]]; then
            if [[ "$list" != *"$file"* ]]; then
                rm $file;
            else
                echo -n "Delete $file? (y/N): " 
                read answer
                if [[ $answer == "y" ]]; then
                    rm $file
                fi
            fi
        fi
    done
fi
